warn('[TEMPEST HUB] Loading Bypass')
wait(1)
warn('[TEMPEST HUB] Checking Functions')
wait(1)
warn('[TEMPEST HUB] Loading Functions')
wait(1)
warn('[TEMPEST HUB] Loading Ui')
wait(1)
local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Tempest Hub | GPO',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

Library:Notify('Loading Grand Piece Online (Sea 1)', 5)

function noFallDamage()
    while getgenv().noFallDamage == true do
        game:GetService("Workspace").PlayerCharacters[game.Players.LocalPlayer.Name].FallDamage.Disabled = true
        wait(1)
    end
end

function noswim()
    while getgenv().noswim == true do
        game:GetService("Workspace").PlayerCharacters[game.Players.LocalPlayer.Name].Swim:Destroy()
        wait(1)
    end
end

function nomovimentsanimations()
    while getgenv().nomovimentsanimations == true do
        game:GetService("Players").LocalPlayer.Backpack.Movements:Destroy()
        wait(1)
    end
end

function nowindshake()
    while getgenv().nowindshake == true do
        game:GetService("Players").LocalPlayer.PlayerScripts.WindShake.Disabled = true
        wait(1)
    end
end

local function unlockgeppo()
    while getgenv().unlockgeppo == true do
        game:GetService("ReplicatedStorage").StatsxN3ROXxx.Skills.skyWalk.Value.Enabled = true
        wait(1)
    end
end

local function walkonwater()
    while getgenv().walkonwater == true do
        game:GetService("ReplicatedStorage").StatsxN3ROXxx.Stats.DF.YamiYami = true
        wait(1)
    end
end      

-- Define o nome do NPC que você deseja cultivar
local npcname = "Bandit" -- Altere para o nome real do NPC que deseja cultivar

-- Variável para controlar a agricultura automática
local isAutoFarming = false

-- Função para realizar a agricultura automática
local function AutoFarmBandit()
    while getgenv().AutoFarmBandit == true do
        local player = game.Players.LocalPlayer
        local TweenService = game:GetService("TweenService")
        local Players = game:GetService("Players")
        local localPlayer = Players.LocalPlayer
        
        
        local localPlayer = Players.LocalPlayer
        if localPlayer and localPlayer.Character then
        local targetPosition = Vector3.new(1008.54822, 53.9249954, 1336.63855, 1, 0, -0, 0, 0, 1, 0, -1, 0) -- Mudar para a posição alvo desejada
        local targetCF = CFrame.new(targetPosition)
        local speed = 60 -- Velocidade do tween (unidades por segundo)
        end
        local args = {
            [1] = {
                [1] = "takequest",
                [2] = "Help Raphtalia"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Quest"):InvokeServer(unpack(args))    
        wait(1)
        function Magnitude(a, b, ignoreY)
            if a == nil or b == nil then
                return
            end
            if a == "player" then
                a = GetCFrame(player.Character).Position
            else
                a = GetCFrame(a).Position
            end
            b = GetCFrame(b).Position
            if ignoreY then
                a = Vector3.new(a.X, 0, a.Z)
                b = Vector3.new(b.X, 0, b.Z)
            end
            return (a - b).magnitude
        end
        
        function GetCFrame(obj)
            local cframe = obj
            local objType = typeof(obj)
            if objType == "Vector3" then
                cframe = CFrame.new(obj)
            elseif objType == "table" then
                cframe = CFrame.new(unpack(obj))
            elseif objType == "string" then
                cframe = CFrame.new(unpack(obj:split(",")))
            elseif objType == "Instance" then
                if obj:IsA("Model") then
                    cframe = obj:GetModelCFrame()
                elseif obj:IsA("Part") then
                    cframe = obj.CFrame
                elseif obj:IsA("Tool") then
                    cframe = obj:GetPivot()
                else
                    local t = obj:FindFirstChildOfClass("Part") or obj:FindFirstChildOfClass("Model")
                    if t then
                        cframe = GetCFrame(t)
                    end
                end
            end
            return cframe
        end
        
        function IsNPCAlive(npc)
            return npc and npc.Parent ~= nil and npc:FindFirstChild("Humanoid") and npc:FindFirstChild("Humanoid").Health > 0
        end
        
        function tweenModel(model, targetCF, speed)
            local targetCF = GetCFrame(targetCF)
            local currentCF = model:GetPrimaryPartCFrame()
            local distanceToTarget = Magnitude("player", targetCF)
            local duration = distanceToTarget / speed
        
            local CFrameValue = Instance.new("CFrameValue")
            CFrameValue.Value = currentCF
            CFrameValue:GetPropertyChangedSignal("Value"):Connect(function()
                local currentValue = CFrameValue.Value
                model:SetPrimaryPartCFrame(CFrame.new(currentValue.Position))
            end)
            local tween = TweenService:Create(CFrameValue, TweenInfo.new(duration), {
                Value = CFrame.new(targetCF.Position, currentCF.Position),
            })
            tween:Play()
            tween.Completed:Connect(function()
                CFrameValue:Destroy()
            end)
        end

        while true do
            task.wait()
            local obj = game.workspace.NPCs:FindFirstChild(npcname)
            if obj and IsNPCAlive(obj) then
                -- Chame a função tweenModel modificada com apenas velocidade
                tweenModel(player.Character, obj, 40)
            end
            if not isAutoFarming then
                break -- Sai do loop principal se a agricultura automática for desativada
            end
        end
    end
end

-- Função para ativar/desativar a agricultura automática
local function ToggleAutoFarming(Value)
    isAutoFarming = Value
    if isAutoFarming then
        AutoFarmBandit() -- Inicie a agricultura automática quando ativada
    end
end


local function autofarmhakielogia()
    while getgenv().autofarmhakielogia == true do
    local player = game.Players.LocalPlayer
    local TweenService = game:GetService("TweenService")
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    
    function Magnitude(a, b, ignoreY)
        if a == nil or b == nil then
            return
        end
        if a == "player" then
            a = GetCFrame(player.Character).Position
        else
            a = GetCFrame(a).Position
        end
        b = GetCFrame(b).Position
        if ignoreY then
            a = Vector3.new(a.X, 0, a.Z)
            b = Vector3.new(b.X, 0, b.Z)
        end
        return (a - b).magnitude
    end
    
    function GetCFrame(obj)
        local cframe = obj
        local objType = typeof(obj)
        if objType == "Vector3" then
            cframe = CFrame.new(obj)
        elseif objType == "table" then
            cframe = CFrame.new(unpack(obj))
        elseif objType == "string" then
            cframe = CFrame.new(unpack(obj:split(",")))
        elseif objType == "Instance" then
            if obj:IsA("Model") then
                cframe = obj:GetModelCFrame()
            elseif obj:IsA("Part") then
                cframe = obj.CFrame
            elseif obj:IsA("Tool") then
                cframe = obj:GetPivot()
            else
                local t = obj:FindFirstChildOfClass("Part") or obj:FindFirstChildOfClass("Model")
                if t then
                    cframe = GetCFrame(t)
                end
            end
        end
        return cframe
    end
    
    function IsNPCAlive(npc)
        return npc and npc.Parent ~= nil and npc:FindFirstChild("Humanoid") and npc:FindFirstChild("Humanoid").Health > 0
    end
    
    function tweenModel(model, targetCF, speed)
        local targetCF = GetCFrame(targetCF)
        local currentCF = model:GetPrimaryPartCFrame()
        local distanceToTarget = Magnitude("player", targetCF)
        local duration = distanceToTarget / speed
    
        local CFrameValue = Instance.new("CFrameValue")
        CFrameValue.Value = currentCF
        CFrameValue:GetPropertyChangedSignal("Value"):Connect(function()
            local currentValue = CFrameValue.Value
            model:SetPrimaryPartCFrame(CFrame.new(currentValue.Position))
        end)
        local tween = TweenService:Create(CFrameValue, TweenInfo.new(duration), {
            Value = CFrame.new(targetCF.Position, currentCF.Position),
        })
        tween:Play()
        tween.Completed:Connect(function()
            CFrameValue:Destroy()
        end)
    end

    while true do
        task.wait()
        local obj = game.workspace.NPCs:FindFirstChild(npcname)
        if obj and IsNPCAlive(obj) then
            -- Chame a função tweenModel modificada com apenas velocidade
            tweenModel(player.Character, obj, 40)
        end
        if not isAutoFarming then
            break -- Sai do loop principal se a agricultura automática for desativada
        end
    end
end
end


local function Magnitude(pos1, pos2)
    return (pos1 - pos2).magnitude
end

local function CheckParty(npc)
    local localPlayer = game.Players.LocalPlayer
    if npc.Name == "Bandit" and localPlayer:FindFirstChild("Party") and npc:FindFirstChild("Party") then
        if localPlayer.Party.Value == npc.Party.Value then
            return true
        end
    end
    return false
end


local function GetNearestPlayer()
    local localPlayer = game.Players.LocalPlayer
    local characters = game:GetService('Workspace').PlayerCharacters:GetChildren()
    local closestDistance, nearestPlayer = math.huge, nil
    local localPos = localPlayer.Character and localPlayer.Character:FindFirstChild('realPos')
    
    if not localPos then
        return nil
    end
    
    local localPosValue = localPos.Value
    
    for _, character in pairs(characters) do
        if character:FindFirstChild('HumanoidRootPart') and character:FindFirstChild('realPos') and character.Name ~= localPlayer.Name and not CheckParty(character) then
            local targetPosValue = character:FindFirstChild('realPos').Value
            local distance = Magnitude(localPosValue.Position, targetPosValue.Position)
            
            if distance < closestDistance then
                closestDistance = distance
                nearestPlayer = character
            end
        end
    end
    
    if closestDistance < 200 then
        return nearestPlayer:FindFirstChild('realPos').Value
    end
    
    return nil
end

-- Define the killaura toggle function
local function ToggleKillAura(Value)
    getgenv().killauragun = Value
    
    while getgenv().killauragun == true do
        local localPlayer = game.Players.LocalPlayer
        local shooting = true
        local shootpos = CFrame.new(0, 0, 0)
        local cf = getrenv()._G.MouseCF
        getrenv()._G.MouseCF = nil

        -- Define KeyCode and UserInputState for shooting action
        local input = {
            KeyCode = Enum.KeyCode.Unknown,
            UserInputState = Enum.UserInputState.Begin,
            UserInputType = Enum.UserInputType.MouseButton1
        }
        
        wait() -- Place wait() here to introduce a delay in the loop.

        -- Aim Assist
        setmetatable(
            getrenv()._G,
            {
                __index = function(a, b)
                    if b == 'MouseCF' then
                        return shooting and (GetNearestPlayer() or cf) or cf
                    end
                    return rawget(a, b)
                end,
                __newindex = function(a, b, c)
                    if b == 'MouseCF' then
                        cf = c
                    end
                    return rawset(a, b, c)
                end
            }
        )
    end
end

function autoreload()
    while getgenv().autoreload == true do
local args = {
    [1] = "reload",
    [2] = {
        ["Gun"] = "Rifle"
    }
}

game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("CIcklcon"):WaitForChild("gunFunctions"):InvokeServer(unpack(args))
end
end




function SetWalkSpeed(Value)
    local walkSpeed = Value
    
    local UIS = game:GetService("UserInputService")
    local RS = game:GetService("RunService")
    local W, A, S, D
    local xVelo, yVelo
    
    while true do
        wait()
        local HRP = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        local C = game.Workspace.CurrentCamera
        local LV = C.CFrame.LookVector

        for i, v in pairs(UIS:GetKeysPressed()) do
            if v.KeyCode == Enum.KeyCode.W then
                W = true
            end
            if v.KeyCode == Enum.KeyCode.A then
                A = true
            end
            if v.KeyCode == Enum.KeyCode.S then
                S = true
            end
            if v.KeyCode == Enum.KeyCode.D then
                D = true
            end
        end

        if W == true and S == true then
            yVelo = false
            W, S = nil, nil
        end

        if A == true and D == true then
            xVelo = false
            A, D = nil, nil
        end

        if yVelo ~= false then
            if W == true then
                if xVelo ~= false then
                    if A == true then
                        local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(45), 0)).LookVector
                        HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
                        W, A = nil, nil
                    else
                        if D == true then
                            local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-45), 0)).LookVector
                            HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
                            W, D = nil, nil
                        end
                    end
                end
            else
                if S == true then
                    if xVelo ~= false then
                        if A == true then
                            local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(135), 0)).LookVector
                            HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
                            S, A = nil, nil
                        else
                            if D == true then
                                local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-135), 0)).LookVector
                                HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
                                S, D = nil, nil
                            end
                        end
                    end
                end
            end
        end

        if W == true then
            HRP.Velocity = Vector3.new((LV.X * walkSpeed), HRP.Velocity.Y, (LV.Z * walkSpeed))
        end
        if S == true then
            HRP.Velocity = Vector3.new(-(LV.X * walkSpeed), HRP.Velocity.Y, -(LV.Z * walkSpeed))
        end
        if A == true then
            local LeftLV = (C.CFrame * CFrame.Angles(0, math.rad(90), 0)).LookVector
            HRP.Velocity = Vector3.new((LeftLV.X * walkSpeed), HRP.Velocity.Y, (LeftLV.Z * walkSpeed))
        end
        if D == true then
            local RightLV = (C.CFrame * CFrame.Angles(0, math.rad(-90), 0)).LookVector
            HRP.Velocity = Vector3.new((RightLV.X * walkSpeed), HRP.Velocity.Y, (RightLV.Z * walkSpeed))
        end

        xVelo, yVelo, W, A, S, D = nil, nil, nil, nil, nil, nil
        wait()
    end
end

function autostatsDF()
    while getgenv().autostatsDF == true do
        local args = {
            [1] = "DevilFruitMastery",
            [3] = 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("stats"):FireServer(unpack(args))
        wait(0.1)
    end
end 

function autostatsH()
    while getgenv().autostatsH == true do
        local args = {
            [1] = "DevilFruitMastery",
            [3] = 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("stats"):FireServer(unpack(args))
        wait(0.1)
    end
end 

function autostatsSTR()
    while getgenv().autostatsSTR == true do
            local args = {
                [1] = "Strength",
                [3] = 1
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("stats"):FireServer(unpack(args))
            wait(0.1)  
    end
end 

function autostatsSTA()
    while getgenv().autostatsSTA == true do
        local args = {
            [1] = "Stamina",
            [3] = 1
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("stats"):FireServer(unpack(args))
        wait(0.1)
    end
end 

function autodarkskill()
    while getgenv().autodarkskill == true do
        wait(5)
        local player = game.Players.LocalPlayer -- Substitua pelo jogador desejado
        local character = player.Character

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                local playerCFrame = humanoidRootPart.CFrame
                local args = {
                    [1] = "Black Hole",
                    [2] = playerCFrame
                }

                local replicatedStorage = game:GetService("ReplicatedStorage")
                local events = replicatedStorage:WaitForChild("Events")
                local skillEvent = events:WaitForChild("Skill")
                skillEvent:InvokeServer(unpack(args))
            end
        end
        local player = game.Players.LocalPlayer -- Substitua pelo jogador desejado
        local character = player.Character

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                local playerCFrame = humanoidRootPart.CFrame
                local args = {
                    [1] = "Cruel Burst",
                    [2] = playerCFrame
                }

                local replicatedStorage = game:GetService("ReplicatedStorage")
                local events = replicatedStorage:WaitForChild("Events")
                local skillEvent = events:WaitForChild("Skill")
                skillEvent:InvokeServer(unpack(args))
            end
        end
        local player = game.Players.LocalPlayer -- Substitua pelo jogador desejado
        local character = player.Character

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                local playerCFrame = humanoidRootPart.CFrame
                local args = {
                    [1] = "Black Hole",
                    [2] = playerCFrame
                }

                local replicatedStorage = game:GetService("ReplicatedStorage")
                local events = replicatedStorage:WaitForChild("Events")
                local skillEvent = events:WaitForChild("Skill")
                skillEvent:InvokeServer(unpack(args))
            end
        end
        local player = game.Players.LocalPlayer -- Substitua pelo jogador desejado
        local character = player.Character

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                local playerCFrame = humanoidRootPart.CFrame
                local args = {
                    [1] = "Black Vortex",
                    [2] = playerCFrame
                }

                local replicatedStorage = game:GetService("ReplicatedStorage")
                local events = replicatedStorage:WaitForChild("Events")
                local skillEvent = events:WaitForChild("Skill")
                skillEvent:InvokeServer(unpack(args))
            end
        end
        local player = game.Players.LocalPlayer -- Substitua pelo jogador desejado
        local character = player.Character

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                local playerCFrame = humanoidRootPart.CFrame
                local args = {
                    [1] = "Black Star",
                    [2] = playerCFrame
                }

                local replicatedStorage = game:GetService("ReplicatedStorage")
                local events = replicatedStorage:WaitForChild("Events")
                local skillEvent = events:WaitForChild("Skill")
                skillEvent:InvokeServer(unpack(args))
            end
        end
        wait(1) -- Add a wait here to avoid high CPU usage
    end
end

function autouseskillR()
    while getgenv().autouseskillR == true do
        local player = game.Players.LocalPlayer -- Substitua pelo jogador desejado
        local character = player.Character

        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                local playerCFrame = humanoidRootPart.CFrame
                local args = {
                    [1] = "Dark Liberation",
                    [2] = playerCFrame
                }

                local replicatedStorage = game:GetService("ReplicatedStorage")
                local events = replicatedStorage:WaitForChild("Events")
                local skillEvent = events:WaitForChild("Skill")
                skillEvent:InvokeServer(unpack(args))
            end
        end
        wait(1) -- Add a wait here to avoid high CPU usage
    end
end

local Tabs = {
    Main = Window:AddTab('Main'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

LeftGroupBox:AddToggle('No Fall Damage', {
    Text = 'No Fall Damage',
    Default = false,
    Tooltip = 'No Fall Damage',
    Callback = function(Value)
        getgenv().noFallDamage = Value
        noFallDamage()  -- Call the function to enable/disable the feature
    end
})

LeftGroupBox:AddToggle('No Swim', {
    Text = 'No Swim',
    Default = false,
    Tooltip = 'No Swim',
    Callback = function(Value)
        getgenv().noswim = Value
        noswim()
    end
})

LeftGroupBox:AddToggle('No Moviments Animations', {
    Text = 'No Moviments Animations',
    Default = false,
    Tooltip = 'No Moviments Animations',
    Callback = function(Value)
        getgenv().nomovimentsanimations = Value
        nomovimentsanimations()
    end
})

LeftGroupBox:AddToggle('Anti Wind Shake', {
    Text = 'Anti Wind Shake',
    Default = false,
    Tooltip = 'Anti Wind Shake',
    Callback = function(Value)
        getgenv().nowindshake = Value
        nowindshake()
    end
})

LeftGroupBox:AddSlider('Walkspeed', {
    Text = 'Walkspeed',
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        SetWalkSpeed(Value) -- Fixed the function call
    end
})

local Tabs = {
    Main = Window:AddTab('Farm'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Farm')

-- Adicione um botão de toggle para ativar/desativar a agricultura automática
LeftGroupBox:AddToggle('Auto Farm Bandit', {
    Text = 'Auto Farm Bandit',
    Default = false,
    Tooltip = 'Auto Farm Bandit',
    Callback = function(Value) -- Use a função ToggleAutoFarming como callback
        getgenv().AutoFarmBandit = Value
        AutoFarmBandit()
    end
})

LeftGroupBox:AddToggle('Aimbot (Only Gun)', {
    Text = 'Aimbot (Only Gun)',
    Default = false,
    Tooltip = 'Kill Aura (Only Gun)',
    Callback = ToggleKillAura
})

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Auto Use Skill (Only Fruits)')

LeftGroupBox:AddToggle('Auto Use Skill Dark', {
    Text = 'Auto Use Skill Dark Skill',
    Default = false,
    Tooltip = 'Auto Use Skill Dark',
    Callback = function(Value)
        getgenv().autodarkskill = Value
        autodarkskill()
    end
})

local RightGroupBox = Tabs.Main:AddRightGroupbox('Auto Use Skill (Only Fruits)')

RightGroupBox:AddToggle('Auto Farm Logia+Haki OBS', {
    Text = 'Auto Farm Logia+Haki OBS',
    Default = false,
    Tooltip = 'Auto Farm Logia+Haki OBS',
    Callback = function(Value)
        isAutoLogia = Value
        if isAutoLogia then
            autofarmhakielogia()
        end
    end
})

local Tabs = {
    Main = Window:AddTab('Stats'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Auto Up Stats')

LeftGroupBox:AddToggle('Auto Up Strenght', {
    Text = 'Auto Up Strenght',
    Default = false,
    Tooltip = 'Auto Up Strenght',
    Callback = function(Value)
        getgenv().autostatsSTR = Value
        autostatsSTR()  -- Call the function to enable/disable the feature
    end
})

LeftGroupBox:AddToggle('Auto Up Stamina', {
    Text = 'Auto Up Stamina',
    Default = false,
    Tooltip = 'Auto Up Stamina',
    Callback = function(Value)
        getgenv().autostatsSTA = Value
        autostatsSTA()
    end
})

LeftGroupBox:AddToggle('Auto Up Defense', {
    Text = 'Auto Up Defense',
    Default = false,
    Tooltip = 'Auto Up Defense',
    Callback = function(Value)
        getgenv().autostatsH = Value
        autostatsH()
    end
})

LeftGroupBox:AddToggle('Auto Up Devil Fruit', {
    Text = 'Auto Up Devil Fruit',
    Default = false,
    Tooltip = 'Auto Up Devil Fruit',
    Callback = function(Value)
        getgenv().autostatsDF = Value
        autostatsDF()
    end
})

local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

local WatermarkConnection
WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(function()
    FrameCounter = FrameCounter + 1

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end

    Library:SetWatermark(('Tempest Hub | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ))
end)

local TabsUI = {
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

Library:OnUnload(function()
    WatermarkConnection:Disconnect()
    print('Unloaded!')
    Library.Unloaded = true
end)

-- UI Settings
local MenuGroup = TabsUI['UI Settings']:AddLeftGroupbox('Menu')


MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

-- Define a tabela 'Options'
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

ThemeManager:SetFolder('Tempest Hub')
SaveManager:SetFolder('Tempest Hub/Grand Piece Online')

SaveManager:BuildConfigSection(TabsUI['UI Settings'])

ThemeManager:ApplyToTab(TabsUI['UI Settings'])

SaveManager:LoadAutoloadConfig()

for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end
warn('[TEMPEST HUB] Loaded')
